Need of concurrent collections:

1) Most of the traditional collections are not Thread safe due to his it leads to
data consistency problems. (Thread safe allows only one thread to perform operations on
collections at a time. It will never allow you  second thread on collections until
first thread completed).
for instance ArrayList, LinkedList, HashSet, TreeSet etc..

2) Vector, Hashtable (These are traditional thread safe collections),
Collections.synchronizedMap, Collections.synchronizedSet, Collections.synchronizedList.
Problem with these collections, waiting time is more when more than one thread is operating on
collections.

3) Traditional collections 90 percent of them are not Thread safe(it leads to data consistency),
even few of traditional collections which provides thread safe it creates waiting time
problems.

4) While iterating collection object using Thread 1, If Thread 2 try to modify the structual modification
on collection object that is performed by Thread 1 then  Iterator fails and raise an
exception called ConcurrentModificationException.

5) Due to reason 4 mentioned above , traditional collection objects are not
suitable for multithreaded scalable applications.

6) ConcurrentModificationException is most common problem for all traditional collection objects.

7) To overcome all the problems we need to move concurrent collections framework.

8) Concurrent Collection framework Introduced in Java 1.5 version onwards.

Things to remember:

1) Concurrent Collections are Thread Safe.
2) When compare to traditional thread safe collections, concurrent collections performance is more
because it uses different locking mechanisms( such as Segment level locking, bucket level locking etc).
3) While one thread interacting collection, the other thread are allowed to modify the collection
in safe manner.

Therefore, Concurrent Collections never throw ConcurrentModificationException.

Important concurrent collections are

1) ConcurrentHashMap
2) CopyOnWriteArrayList
3) CopyOnWriteArraySet



Map(I) <---- ConcurrentMap(I) <----ConcurrentHashMap(C)

Methods in ConcurrentMap(I)

1. public abstract V putIfAbsent(K, V);
2. public abstract boolean remove(java.lang.Object, java.lang.Object);
3. public abstract boolean replace(K, V, V);


ConcurrentHashMap:-
-------------------
1) Default capacity of traditional hashmap or concurrent hash map is 16(buckets).

Here 16 represents concurrent levels. Look into more details

For instance initial capacity of  concurrent map is 16 and concurrency level 16 it means for every bucket
one lock will be available.

For instance initial capacity of concurrent map is 16 and concurrency level 8 it means for every two buckets
one lock is available. Most of the time concurrent level and capacity level more or less same.

a) Bucket Level Locking
b) Segment Level Locking

Things to remember:--
------------------
1) Underlying data structure is Hashtable for ConcurrentHashMap
2) ConcurrentHashMap allows concurrent read operations and thread safe update operations.
3) To perform read operation thread won't require any lock. But to perform update operation
thread requires lock. But it is lock on only particular part of the map object(segement level/
bucket level) instead of total map.
4) Concurrent update is achieved by internally dividing map in to smaller portions which is
defined by concurrent Levels.
5) Default concurrency level is 16.
6) ConcurrencyHashMap allows any number of read operations but 16 update operations at a time by default.
7) Null is not allowed for both key and value.
8) While one thread is iterating, the other thread can perform update operation and ConcurrentHashMap
never throw ConcurrentModificationException.

Constructors in ConcurrencyHashMap:

  public java.util.concurrent.ConcurrentHashMap(); // default capacity 16, fill ration 0.75(load factor)
  public java.util.concurrent.ConcurrentHashMap(initial capacity);
  public java.util.concurrent.ConcurrentHashMap(initial capacity, fill ratio);
  public java.util.concurrent.ConcurrentHashMap(initial capacity, fill ratio, concurrency level);
   public java.util.concurrent.ConcurrentHashMap(java.util.Map<? extends K, ? extends V>);


Difference between HashMap and ConcurrentHashMap

1. Hash Map is not Thread Safe.
2. Relatively performance is high since threads are not required to wait perform
operations on hashmap which leads data consistency problems some times.
3. While one thread is iterating hashmap, other thread not allowed to modify the hashmap object.If do so,
it will throw ConcurrentModificationException.
4. Iterator is fail-fast.
5. Null is allowed for Both Key and values.
6. Introduced in java 1.2


ConcurrentHashMap

1. ConcurrentHashMap is Thread safe.
2. Relatively performance is low, because sometimes threads are required to wait to
operate on ConcurrentHashMap
3. While one thread is iterating ConcurrentHashMap, other thread allowed to modify the
ConcurrentHashMap in safe manner. It will never throw ConcurrentModificationException. It is
4. Iterator is Fail-Safe.
5. Null is not allowed for both key and values.
6. It was introduced in java 1.5.

Note: If we try to modify the underlying collection, Iterator immediately fails and raise
ConcurrentModificationException.we call those iterators are Fail-fast iterators.(Example: HashMap)



CopyOnWriteArrayList(C):--

Collection(I) <-- List (I) <-- CopyOnWriteArrayList(C)

1. It is a Thread safe version of ArrayList as name indicates CopyOnWriteArrayList. It creates
a cloned copy of underlying ArrayList for every update operation at certain point both
will synchronized automatically which is taken care by JVM Internally.

2. As update operation will performed on cloned copy. So there is no effect for the
threads which perform read operations.

3. It is costly to use because for every update operation a cloned copy will be created.
Hence CopyOfWriteArrayList is best choice when several read operations and less number of
write operations required to perform.

4. Insertion order is preserved.
5. Duplicate objects are allowed.
6. Heterogeneous objects are allowed.
7. Null insertion is possible.
8. It implements Serializable, Cloneable and RandomAccess Interfaces.
9. While one thread is operating CopyOnWriteArrayList, other thread will allow to modify the
object of CopyOfWriteArrayList. It will never throw ConcurrentModificationException.
10.This is iterator fail-safe.
11. Iterator of ArrayList can perform remove operation but iterator of CopyOfWriteArrayList
can not perform remove operation. Otherwise, we'll get RuntimeException saying UnsupportedOperationException.









