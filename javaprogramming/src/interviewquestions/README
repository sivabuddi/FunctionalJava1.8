ClassNotFoundException vs NoClassDefFoundError in Java :---
--------------------------------------------------------

Both of the exceptions that are ClassNotFoundException and NoClassDefFoundError occur when the class is not
found at runtime. They are related to the Java classpath.

ClassNotFoundException occurs when you try to load a class at runtime using Class.forName() or
loadClass()(java.lang.ClassLoader) methods and requested classes are not found in classpath.
Most of the time this exception will occur when you try to run an application without updating the classpath
with JAR files.  This exception is a checked Exception derived you need to provide explicit handling for it.

This exception also occurs when you have two class loaders and if a ClassLoader tries to access a class
that is loaded by another classloader in Java. You must be wondering that what actually is classloader in Java.
Java ClassLoader is a part of the Java Runtime Environment that dynamically loads Java classes in
JVM(Java Virtual Machine). The Java Runtime System does not need to know about files and files systems
because of classloaders.

public class ClassNotFoundEx {

    public static void main(String[] args) {

        try{
            Class.forName("SivaKumarBuddi");
        }
        catch(Exception exception){
            exception.printStackTrace();

        }
    }
}

ava.lang.ClassNotFoundException: SivaKumarBuddi
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:315)
	at interviewquestions.ClassNotFoundEx.main(ClassNotFoundEx.java:8)

----------------------------------------------------------------------------------------------------------

NoClassDefFoundError

Now dealing on the next exception that is NoClassDefFoundError occurs when the class was present during
compile time and the program was compiled and linked successfully but the class was not present during runtime.
It is an error that is derived from LinkageError. Linkage error occurs when a class has some dependencies
on another class and the latter class changes after compilation of the former class. NoClassFoundError is the
result of implicit loading of class because of calling a method or accessing a variable from that class.
This error is more difficult to debug and find the reason why this error occurred. So in this case you should
always check the classes which are dependent on this class. In order to illustrate let us first make any two
classes for a java program and link them.

class Testing {

    // Method
    void greeting()
    {
        // Print statement whenever method is called
        System.out.println("hello!");
    }
}

public class NoClassDefFoundErr {

    public static void main(String[] args) {

        // Creating object of class 1
        // inside main() in class2
        Testing geeks = new Testing();

        // Calling method of above class
        geeks.greeting();


    }
}




Above program will be successfully compiled and generated two classes ‘Testing.class’ and ‘NoClassDefFoundErr.class.’
Now remove Testing.class file and run GFG.class when we saw that at Java runtime NoClassDefFoundError
will be thrown.


Summary:

ClassNotFoundException ---> CheckedException , Explicit Loading
NoClasDefFoundException ---> UncheckedException , Implicit Loading

Implicit Loading:
Implicit class loading occurs when a class is loaded as result of a reference, instantiation, or inheritance.

Explicit class loading:
Explicit class loading occurs when a class is loaded by using 'loadClass()' method of ClassLoader class or
using 'forName()' of class java.lang.Class. If the class is already loaded, then a reference is simply returned


Note:

In Java, ClassNotFoundException is a checked exception.

In Java, a checked exception is one that the calling code must explicitly
handle - either with a catch block, or a throws clause.

Java exceptions are checked exceptions by default, and only a special set of exceptions
are “unchecked”. The “unchecked” exceptions are RuntimeException, and any exception that extends
(inherits from) RuntimeException.

References:
https://xperti.io/blogs/classnotfoundexception-vs-noclassdeffounderror-in-java/